package clue;

import java.awt.Color;
import java.awt.Graphics;
import java.lang.reflect.Field;
import java.util.HashSet;

import javax.swing.JPanel;

public abstract class Player extends JPanel {
	private String name;
	private Color color;
	private int index;
	private int row;
	private int column;
	protected HashSet<Card> myCards;
	private HashSet<Card> seen = null;

	public Player(String name, String color, int row, int col) {
		this.name = name;

		this.row = row;
		this.column = col;

		if (color.length() == 8) {
			try {
				this.color = Color.decode(color);
			} catch (Exception e) {
			}
		} else {
			try {
				// We can use reflection to convert the string to a color
				Field field = Class.forName("java.awt.Color").getField(color.trim());
				this.color = (Color)field.get(null);
			} catch (Exception e) {
				this.color = null;  // Not defined
			}
		}
		myCards = new HashSet<Card>();
	}

	public String getName() {
		return name;
	}

	public Card disproveSuggestion(HashSet<Card> suggestion) {
		HashSet<Card> returnCards = new HashSet<Card>();
		for (Card card : suggestion) {
			if (myCards.contains(card)) {
				returnCards.add(card);
			}
		}
		return ClueGame.randomCard(returnCards);
	}

	public boolean isComputerPlayer() {
		return false;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public int getIndex() {
		return index;
	}

	// Automatically generated by Eclipse.
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((color == null) ? 0 : color.hashCode());
		result = prime * result + index;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		Player other = (Player) obj;
		if (color == null) {
			if (other.color != null) {
				return false;
			}
		} else if (!color.equals(other.color)) {
			return false;
		}
		if (index != other.index) {
			return false;
		}
		if (name == null) {
			if (other.name != null) {
				return false;
			}
		} else if (!name.equals(other.name)) {
			return false;
		}
		return true;
	}

	@Override
	public String toString() {
		return "Player [name=" + name + ", color=" + color + ", index=" + index
				+ "]";
	}

	public void addCard(Card card) {
		myCards.add(card);
	}

	public void move(BoardCell cell) {
		row = cell.row;
		column = cell.col;
	}

	public void paintComponent(Graphics g, int numRows, int numColumns) {
		super.paintComponent(g);
		int size = GUIBoard.CELL_SIZE;
		int padding = 4;
		g.setColor(color);
		g.fillOval(column*size+1, row*size+1, size-padding, size-padding);
	}

	public HashSet<Card> getCards() {
		return myCards;
	}

	public int getRow() {
		return row;
	}

	public int getCol() {
		return column;
	}
}
